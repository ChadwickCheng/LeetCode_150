// 在JavaScript中，位运算符是直接在二进制表示上进行操作的。以下是一些常见的位运算符：

// 按位与（&）：对于每一个比特位，只有两个操作数相应的比特位都是1时，结果才为1，否则为0。
let a = 5; // 二进制: 0101
let b = 3; // 二进制: 0011
console.log(a & b); // 输出 1, 二进制: 0001

// 按位或（|）：对于每一个比特位，只要两个操作数相应的比特位有一个1时，结果就为1，否则为0。
let c = 5; // 二进制: 0101
let d = 3; // 二进制: 0011
console.log(c | d); // 输出 7, 二进制: 0111

// 按位异或（^）：对于每一个比特位，当两个操作数相应的比特位有且只有一个1时，结果为1，否则为0。
let e = 5; // 二进制: 0101
let f = 3; // 二进制: 0011
console.log(e ^ f); // 输出 6, 二进制: 0110

// 按位非（~）：对操作数的每一个比特位，如果该位是0，则结果位为1，如果该位是1，则结果位为0。
let g = 5; // 二进制: 0101
console.log(~g); // 输出 -6, 二进制: 1010

// 左移（<<）：将操作数的二进制表示向左移动指定的位数，右边用0填充。
let h = 5; // 二进制: 0101
console.log(h << 1); // 输出 10, 二进制: 1010

// 符号位是二进制数中的一位，用于表示该数的正负。在一个有符号整数中，符号位通常是最高位（对于二进制数，就是最左边的位）。如果符号位是0，那么这个数就是正数；如果符号位是1，那么这个数就是负数。

// 有符号右移（>>）：将操作数的二进制表示向右移动指定的位数，左边用符号位填充。
let i = 5; // 二进制: 0101
console.log(i >> 1); // 输出 2, 二进制: 0010

// 无符号右移（>>>）：将操作数的二进制表示向右移动指定的位数，左边用0填充。
let j = 5; // 二进制: 0101
console.log(j >>> 1); // 输出 2, 二进制: 0010

// 注意：JavaScript中的所有数字都是以64位浮点数形式存储的，但是位运算符并不直接操作64位的浮点数，而是先将其转换为32位整数，然后在这个32位整数上进行位运算，最后再将结果转回64位的浮点数。