/*
什么是回溯算法，为什么要用回溯，怎么使用回溯算法

回溯算法是一种试探性的解决问题方法，它尝试着去寻找问题的解，如果当前的解答策略不能得到有效的解或者已经得到所有可能的解，那么就回退到上一步，尝试别的解答策略。

回溯算法通常用于解决如组合、排列、切割、子集、棋盘等问题，这些问题通常需要搜索所有的可能性。回溯算法的主要思想是“尝试与恢复”，即一条路走到黑后再退回来尝试其他的路。

使用回溯算法的步骤通常如下：

1. 选择：在每一步都有多个选择。选择其中一个。
2. 约束：设定哪些选择是不符合要求的。
3. 目标：已经找到一个符合要求的解答。
在代码实现时，回溯算法通常使用递归来实现，从一个决策树的根节点开始，递归地向下搜索每一个分支。

如果当前递归的路径（即选择的序列）没有达到目标，那么就返回上一层，撤销上一步的选择，尝试其他的选择。

如果所有的路径都已经尝试过，那么问题的解就在其中。

例如，在上面的二维网格搜索问题中，我们就使用了回溯算法。我们在每个单元格都有四个选择（上、下、左、右）。我们递归地搜索每一个选择，如果当前的路径不能得到有效的解（例如走出边界或者走到已经访问过的单元格），那么就返回上一层，撤销上一步的选择，尝试其他的选择。如果所有的路径都已经尝试过，那么问题的解就在其中。


*/